Using System
Using System.Collections
Using System.Collections.Generic
Using System.ComponentModel
Using System.Data
Using System.Drawing
Using System.Text
Using System.Windows.Forms
Using System.IO 

DclNamespace dotnet_project

BegClass formMain Extends(System.Windows.Forms.Form) Access(*Public) Partial(*Yes)

	/region Default Constructor
	
	BegConstructor Access(*Public)
		//
		// Required for Windows Form Designer support
		//
		InitializeComponent()

		//
		// TODO: Add any constructor code after InitializeComponent call
		//
	EndConstructor

	/endregion

    // It might be advantageous to declare forms globally. 
    // These lines do that. These lines are mostly here for 
    // discussion purposes. 
    //- DclFld ModalForm Type(formModal) New()
    //- DclFld NonModalForm Type(formNonModal) New()

    DclConst NONMODAL Value(1)
    DclConst MODAL Value(2)

	BegSr formMain_Load Access(*Private) Event(*this.Load)
		DclSrParm sender Type(*Object)
		DclSrParm e Type(System.EventArgs)

        // The `notes.txt` file provides the application notes displayed in this form.
        DclFld BinaryPath Type(*String) 

        // If you wanted the current user's documents use this code. 
        //- BinaryPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)

        // For this app the text file is stored in the same folder as the EXE file. 
        BinaryPath = AppDomain.CurrentDomain.BaseDirectory
        // Read the entire file and store its contents in the `textboxNotes` textbox. 
        textboxNotes.Text = File.ReadAllText(BinaryPath + '\notes.txt') 

        // Populate the combobox. 
        PopulateComboBox()
	EndSr

    BegSr PopulateComboBox
        // The combobox is populated with instances of the `ComboBoxItem` class. This is a 
        // user-provided class. Setting the `DisplayMember` tells teh combobox what property
        // from the `ComboBoxItem` instance is displayed as text in the combobox.         
        comboboxFormType.DisplayMember = 'Text'
        
        // Setting the `ValueMember` property isn't necessary. If you read about the [`SelectedValue`
        // in the ComboBox docs](https://goo.gl/Kkh1QU) is sure seems like if you sent 
        // the ValueMember you should be able to use the ComboBox's `SelectedValue` property 
        // to determine the selected value (duh!). The docs are poorly written and SelectedValue
        // only works when the Items property is databound to a list. That's more trouble than 
        // it's worth. Instead, as you'll see in farther on down in the code, we'll avoid the
        // the need for the `SelectedValue` property by using the `SelectedItem` property. 
        //- comboboxFormType.ValueMember = 'IntegerValue'

        // Add a combobox entry for the `Show` method.
        comboboxFormType.Items.Add(*New ComboboxItem('Show', NONMODAL))
        // Add a combobox entry for the `ShowDialog` method.
        comboboxFormType.Items.Add(*New ComboboxItem('ShowDialog', MODAL))

        // This code is the functional equivalent of the two lines above. 
        // It illustrates how effective a good constructor can be in helping
        // keep code succinct. 

        //- DclFld ci Type(ComboBoxItem) 
        //-
        //- ci = *New ComboBoxItem()
        //- ci.Text = 'Show'
        //- ci.Value = 1
        //- ComboBoxFormType.Items.Add(ci) 
        //-
        //- ci = *New ComboBoxItem()
        //- ci.Text = 'ShowDialog'
        //- ci.Value = 2
        //- ComboBoxFormType.Items.Add(ci) 

        // The combobox doesn't have the first item selected by default. 
        // Like all ordinal positioning in .NET, the SelectedIndex property 
        // is zero-based. 
        comboboxFormType.SelectedIndex = 0
    EndSr

	BegSr buttonDisplayForm_Click Access(*Private) Event(*this.buttonDisplayForm.Click)
		DclSrParm sender Type(*Object)
		DclSrParm e Type(System.EventArgs)

        DclFld SelectedItem Type(ComboboxItem)
        DclFld FormSelection Type(*Integer4) 

        FormSelection = comboboxFormType.SelectedValue *As *Integer4 

        SelectedItem = comboboxFormType.SelectedItem *As ComboboxItem 
        If SelectedItem = *Nothing 
            // Assign default value. 
        Else 
            If SelectedItem.IntegerValue = MODAL
                ShowModalForm()
            Else 
                ShowNonModalForm()
            EndIf  
        EndIf 
    EndSr

    BegSr ShowNonModalForm
        DclFld NonModalForm Type(formNonModal) New()

        NonModalForm.textboxName.Text = textboxName.Text 
        NonModalForm.Show()      
    EndSr

    BegSr ShowModalForm
        DclFld ModalForm Type(formModal) New()
        DclFld dr Type(DialogResult) 

        DclFld ci Type(CustomerInfo)

        dr = ModalForm.ShowDialog()
        If (dr = DialogResult.OK) 
            ci = ModalForm.GetCustomerInfo()  
            MsgBox 'OK was clicked'
        Else
            MsgBox 'Cancel was clicked'
        Endif 

        // Although it's [disputed](https://goo.gl/fRKJrQ), it's a good practice
        // to call a ShowDialog-displayed form's Dispose() before the form goes 
        // out of scope. 
        ModalForm.Dispose()
    EndSr
    	
EndClass


